@page "/"
@using Microsoft.AspNetCore.DataProtection
@using System.Text.Json.Nodes
@using System.Text.Json
@using System.Runtime.InteropServices
@using System.Text.RegularExpressions
@using System.Web
@rendermode RenderMode.InteractiveServer
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor ContextAccessor
@inject IDataProtectionProvider DataProtectionProvider

<PageTitle>Insertions</PageTitle>

<h1>Insertions</h1>

@if (!browser)
{
    <em>Checking access token...</em>
}
else
{
    var config = Configuration.GetSection("AzureDevOpsOAuth");
    // https://learn.microsoft.com/en-us/azure/devops/integrate/get-started/authentication/azure-devops-oauth?view=azure-devops#2-authorize-your-app
    var authorizeUrl = new UriBuilder("https://app.vssps.visualstudio.com/oauth2/authorize");
    var query = HttpUtility.ParseQueryString(string.Empty);
    query.Add("client_id", config.GetValue<string>("AppId"));
    query.Add("response_type", "Assertion");
    query.Add("scope", "vso.code_write vso.threads_full");
    query.Add("redirect_uri", NavigationManager.ToAbsoluteUri("/oauth/callback").ToString());
    authorizeUrl.Query = query.ToString();

    <a href="@authorizeUrl" class="me-2">@(string.IsNullOrEmpty(accessToken) ? "Authorize" : "Re-authorize")</a>
    <a href="https://app.vsaex.visualstudio.com/me" class="me-2"
        title="You can revoke this app's access there">Manage your authorizations</a>

    if (!string.IsNullOrEmpty(accessToken))
    {
        <div class="my-2">
            <select class="form-select d-inline-block w-auto" @bind="statusFilter">
                <option value="@StatusFilter.All">All</option>
                <option value="@StatusFilter.Active">Only active</option>
            </select>

            <button class="btn btn-primary me-2" @onclick="StartAsync">Load</button>
            
            <button class="btn btn-outline-danger me-2" @onclick="@(() => editMode = !editMode)"
                title="@(!editMode ? "Show Abandon buttons" : "Hide Abandon buttons")">
                @if (!editMode)
                {
                    @:Edit mode
                }
                else
                {
                    @:Readonly mode
                }
            </button>

            @if (loading)
            {
                @: Loading...
            }
        </div>
    }
}

@if (!started || errorHtml != null)
{
    if (errorHtml != null)
    {
        <p>⚠️ An error occurred. You may need to re-authorize the app. This is the HTML response returned:</p>
        <iframe srcdoc="@errorHtml"></iframe>
    }
}
else if (insertions == null)
{
    <p>Loading...</p>
}
else
{
    <label>Repo:</label>
    <select class="form-select d-inline-block w-auto me-3" @bind="currentRepo">
        @foreach (var repo in insertions.Select(x => x.Repo).Distinct())
        {
            <option value="@repo">@repo</option>
        }
    </select>

    <label>Target:</label>
    <select class="form-select d-inline-block w-auto me-3" @bind="currentTargetBranch">
        @foreach (var branch in insertions.Select(x => x.TargetBranch).Distinct())
        {
            <option value="@branch">@branch</option>
        }
    </select>

    <button class="btn btn-outline-secondary btn-sm me-1" @onclick="() => LoadRps(numberOfRecentRpsToLoad)">Load @numberOfRecentRpsToLoad next recent RPS data</button>

    <button class="btn btn-outline-secondary btn-sm" @onclick="() => LoadRps()">Load all RPS data</button>

    <ol class="mt-2">
        @foreach (var insertion in insertions)
        {
            if (insertion.Repo != currentRepo || insertion.TargetBranch != currentTargetBranch)
            {
                continue;
            }

            <li value="@insertion.PullRequestId">
                <span title="@insertion.Status">@StatusToEmoji(insertion.Status)</span>
                <span title="Draft? @insertion.IsDraft">@IsDraftToEmoji(insertion.IsDraft)</span>

                <span style="margin-left: 0.1em; margin-right: 0.1em">
                    @foreach (var review in insertion.Reviews)
                    {
                        <img src="@review.ImageUrl" title="@review.DisplayName: @review.Vote"
                            style="width: 1em; height: 1em; border: 0.1em solid @VoteToColor(review.Vote)" />
                    }
                </span>

                <span title="Source branch (the branch of the GitHub repo that the insertion is created from)">@insertion.SourceBranch</span>

                <a href="@insertion.Url" title="@insertion.Title">@insertion.BuildNumber</a>

                <button class="btn btn-outline-secondary btn-sm" @onclick="() => insertion.DisplayJson = !insertion.DisplayJson">JSON</button>
                @if (editMode)
                {
                    <button class="btn btn-outline-danger btn-sm ms-1" @onclick="insertion.AbandonAsync" disabled="@(insertion.Status != PullRequestStatus.Active)">Abandon</button>
                }

                @if (insertion.Abandoning)
                {
                    @: Abandoning...
                }

                @if (insertion.RpsSummary is null)
                {
                    @: RPS not loaded
                }
                else if (!insertion.RpsSummary.Loaded)
                {
                    @: Loading RPS...
                }
                else
                {
                    @: DDRIT: @RpsRunToString(insertion.RpsSummary.Ddrit),
                    @: Speedometer: @RpsRunToString(insertion.RpsSummary.Speedometer)
                    @(" ")
                }

                <button class="btn btn-outline-secondary btn-sm" @onclick="insertion.RefreshRpsSummary">Refresh RPS</button>

                @if (insertion.DisplayJson)
                {
                    <pre>@insertion.Json</pre>
                }
            </li>
        }
    </ol>
    <button class="btn btn-outline-secondary me-2" @onclick="LoadMoreAsync">Load more</button>
    @if (loading)
    {
        @: Loading...
    }

    <p></p>
}

<script>
    function getAccessTokenCookie() {
        const name = "access_token=";
        const decodedCookie = decodeURIComponent(document.cookie);
        const cookies = decodedCookie.split(';');
        for (const cookie of cookies) {
            if (cookie.trim().startsWith(name)) {
                return cookie.substring(name.length);
            }
        }
        return "";
    }
</script>

@code {
    private static readonly int numberOfRecentRpsToLoad = 10;

    // https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-requests/get-pull-requests?view=azure-devops-rest-6.0&tabs=HTTP
    private static readonly string listUrl = "https://dev.azure.com/devdiv/devdiv/_apis/git/repositories/a290117c-5a8a-40f7-bc2c-f14dbe3acf6d/pullrequests?searchCriteria.creatorId=122d5278-3e55-4868-9d40-1e28c2515fc4&searchCriteria.reviewerId=6c25b447-1d90-4840-8fde-d8b22cb8733e&api-version=6.0";

    private string? accessToken;
    private HttpClient client = new HttpClient();
    private bool browser;
    private bool started;
    private bool loading;
    private bool editMode;
    private StatusFilter statusFilter;
    private string currentRepo = "Roslyn";
    private string currentTargetBranch = "refs/heads/main";
    private VsInsertion[]? insertions;
    /// <summary>Map from VS Insertion PR ID to the corresponding <see cref="RpsSummary"/>.</summary>
    /// <remarks>Kept separately from the list of insertions so RPS data survive reloads of insertions.</remarks>
    private readonly Dictionary<string, RpsSummary> rpsSummaries = new();
    private string? errorHtml;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var encryptedAccessToken = await JSRuntime.InvokeAsync<string>("getAccessTokenCookie");
            accessToken = string.IsNullOrEmpty(encryptedAccessToken) ? null :
                DataProtectionProvider.CreateProtector("access_token").Unprotect(encryptedAccessToken);
            browser = true;
            StateHasChanged();

            await StartAsync();
            StateHasChanged();
        }
    }

    private async Task StartAsync()
    {
        if (string.IsNullOrEmpty(accessToken))
        {
            return;
        }

        started = true;
        insertions = null;
        errorHtml = null;
        StateHasChanged();

        client.DefaultRequestHeaders.Remove("Authorization");
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {accessToken}");

        await LoadMoreAsync();
    }

    private async Task LoadMoreAsync()
    {
        loading = true;
        StateHasChanged();
        try
        {
            var skip = insertions?.Length ?? 0;
            var url = listUrl + "&searchCriteria.status=" + statusFilter.ToString().ToLowerInvariant() + "&$top=100&$skip=" + skip;
            Console.WriteLine(url);
            var response = await client.GetStringAsync(url);
            Console.WriteLine("Loaded");

            JsonNode? node;
            try
            {
                node = JsonNode.Parse(response);
            }
            catch
            {
                errorHtml = response;
                return;
            }

            errorHtml = null;
            var moreInsertions = node!["value"]!.AsArray().Select(x => new VsInsertion(this, x!));

            if (insertions == null)
            {
                insertions = moreInsertions.ToArray();
            }
            else
            {
                insertions = insertions.Concat(moreInsertions).ToArray();
            }
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void LoadRps(int? max = null)
    {
        if (insertions != null)
        {
            var count = 0;
            foreach (var insertion in insertions)
            {
                if (insertion.RpsSummary is null)
                {
                    count++;
                    insertion.RefreshRpsSummary();
                }

                if (count >= max)
                {
                    break;
                }
            }
        }
    }

    class VsInsertion(Insertions page, JsonNode node)
    {
        private Match? parsedTitle;

        public bool DisplayJson { get; set; }
        public bool Abandoning { get; private set; }

        public string PullRequestId => node["pullRequestId"]!.ToString();
        public string Url => $"https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/{PullRequestId}";
        public string Title => node["title"]!.ToString();
        public Match ParsedTitle => (parsedTitle ??= Regex.Match(Title, @"(?<repo>\w+) '(?<source>[^']+)/(?<build>[\d.]+)' Insertion into (?<target>.*)"));
        public string Json => node.ToJsonString(new() { WriteIndented = true });
        public PullRequestStatus Status { get; private set; } = Enum.Parse<PullRequestStatus>(node["status"]!.ToString(), ignoreCase: true);
        public bool IsDraft => (bool)node["isDraft"]!;
        public string Repo => ParsedTitle.Groups["repo"].Value;
        public string SourceBranch => ParsedTitle.Groups["source"].Value;
        public string BuildNumber => ParsedTitle.Groups["build"].Value;
        public string TargetBranch => node["targetRefName"]!.ToString();
        public Review[] Reviews { get; } = node["reviewers"]?.AsArray().Select(x => new Review(x!)).ToArray() ?? Array.Empty<Review>();
        public RpsSummary? RpsSummary
        {
            get => page.rpsSummaries.TryGetValue(PullRequestId, out var rpsSummary) ? rpsSummary : null;
            private set
            {
                if (value is null)
                {
                    page.rpsSummaries.Remove(PullRequestId);
                }
                else
                {
                    page.rpsSummaries[PullRequestId] = value;
                }
            }
        }

        public async Task AbandonAsync()
        {
            Abandoning = true;
            try
            {
                // https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-requests/update?view=azure-devops-rest-7.0&tabs=HTTP
                var response = await page.client.PatchAsJsonAsync(
                    $"https://dev.azure.com/devdiv/devdiv/_apis/git/repositories/a290117c-5a8a-40f7-bc2c-f14dbe3acf6d/pullrequests/{PullRequestId}?api-version=7.0",
                    new { status = "abandoned" });
                Console.WriteLine(response);
                Console.WriteLine(await response.Content.ReadAsStringAsync());

                if (response.IsSuccessStatusCode)
                {
                    Status = PullRequestStatus.Abandoned;
                }
            }
            finally
            {
                Abandoning = false;
            }
        }

        public void RefreshRpsSummary()
        {
            RpsSummary = new RpsSummary();
            page.StateHasChanged();
            LoadRpsSummary(RpsSummary);
        }

        private async void LoadRpsSummary(RpsSummary rpsSummary)
        {
            try
            {
                // https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-request-threads/list?view=azure-devops-rest-7.0&tabs=HTTP
                var json = await page.client.GetStringAsync($"https://dev.azure.com/devdiv/devdiv/_apis/git/repositories/a290117c-5a8a-40f7-bc2c-f14dbe3acf6d/pullrequests/{PullRequestId}/threads?api-version=6.0");
                var node = JsonNode.Parse(json);
                var threads = node!["value"]!.AsArray();
                rpsSummary.Ddrit = getRunResults(threads, "We've started **VS64** Perf DDRITs");
                rpsSummary.Speedometer = getRunResults(threads, "We've started Speedometer");
                rpsSummary.Loaded = true;
                page.StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                rpsSummary.Loaded = true;
                page.StateHasChanged();
            }

            static RpsRun? getRunResults(JsonArray threads, string text)
            {
                var latestThread = threads.Where(x => x!["comments"]!.AsArray().Any(x => x!["content"]?.ToString().Contains(text) ?? false)).LastOrDefault();
                if (latestThread == null)
                {
                    return null;
                }

                var latestComment = latestThread["comments"]!.AsArray().Where(x => x!["author"]!["displayName"]!.ToString() == "VSEng Perf Automation Account").LastOrDefault();
                if (latestComment == null)
                {
                    return new RpsRun(InProgress: true, Regressions: 0, BrokenTests: 0);
                }

                var latestText = latestComment["content"]!.ToString();
                if (latestText.Contains("Test Run **PASSED**"))
                {
                    return new RpsRun(InProgress: false, Regressions: 0, BrokenTests: 0);
                }

                return new RpsRun(InProgress: false, Regressions: tryGetCount(latestText, "regression"), BrokenTests: tryGetCount(latestText, "broken test"));
            }

            static int tryGetCount(string text, string label)
            {
                var match = Regex.Match(text, @$"(\d+) {label}");
                if (!match.Success || !int.TryParse(match.Groups[1].Value, out var result))
                {
                    return -1;
                }

                return result;
            }
        }
    }

    class Review(JsonNode node)
    {
        public string DisplayName => node["displayName"]!.ToString();
        public string ImageUrl => node["imageUrl"]!.ToString();
        public Vote Vote => (Vote)(int)node["vote"]!;
    }

    class RpsSummary
    {
        public bool Loaded { get; set; }
        public RpsRun? Ddrit { get; set; }
        public RpsRun? Speedometer { get; set; }
    }

    record RpsRun(bool InProgress, int Regressions, int BrokenTests);

    static string RpsRunToString(RpsRun? run)
    {
        if (run == null || run.InProgress || (run.Regressions == -1 && run.BrokenTests == -1))
        {
            return "?";
        }

        if (run.BrokenTests is not (0 or -1))
        {
            return $"{numberToString(run.Regressions)}+{run.BrokenTests}";
        }

        return numberToString(run.Regressions);

        static string numberToString(int num)
        {
            return num == -1 ? "?" : $"{num}";
        }
    }

    enum PullRequestStatus
    {
        Abandoned,
        Active,
        Completed
    }

    enum StatusFilter
    {
        All,
        Active
    }

    static string StatusToEmoji(PullRequestStatus status) => status switch
    {
        PullRequestStatus.Abandoned => "🔴", // red circle
        PullRequestStatus.Active => "🟡", // yellow circle
        PullRequestStatus.Completed => "🟢", // green circle
        _ => "?",
    };

    static string IsDraftToEmoji(bool isDraft) => isDraft switch
    {
        true => "🔘", // white circle
        false => "⚫", // black circle
    };

    enum Vote
    {
        Approved = 10,
        ApprovedWithSuggestions = 5,
        NoVote = 0,
        WaitingForAuthor = -5,
        Rejected = -10,
    }

    static string VoteToColor(Vote vote) => vote switch
    {
        Vote.Approved => "green",
        Vote.Rejected => "red",
        Vote.NoVote => "lightgray",
        _ => "yellow",
    };
}
