@page "/"
@using Microsoft.AspNetCore.DataProtection
@using System.Text.Json.Nodes
@using System.Text.Json
@using System.Runtime.InteropServices
@using System.Text.RegularExpressions
@using System.Web
@rendermode RenderMode.InteractiveServer
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor ContextAccessor
@inject IDataProtectionProvider DataProtectionProvider
@inject TitleParser TitleParser
@inject RpsParser RpsParser

<PageTitle>Insertions</PageTitle>

<h1>Insertions</h1>

@if (!browser)
{
    <em>Checking access token...</em>
}
else
{
    <div class="my-2">
        @if (string.IsNullOrEmpty(accessToken))
        {
            <div class="row g-3 align-items-center">
                <div class="col-auto">
                    <input type="password" class="form-control" placeholder="PAT" @bind="accessTokenInput" />
                </div>
                <div class="col-auto">
                    <button type="submit" class="btn btn-primary" @onclick="LogInAsync">Log In</button>
                </div>
            </div>

            <details class="my-2">
                <summary>How do I get the PAT?</summary>

                <p>
                    The simplest way is to use the
                    <a href="https://dev.azure.com/dnceng/public/_artifacts/feed/dotnet-eng/NuGet/Microsoft.DncEng.PatGeneratorTool" target="_blank">PatGeneratorTool</a>:
                </p>
                <ol>
                    <li>
                        <CopyableCode Code="dotnet tool install --global Microsoft.DncEng.PatGeneratorTool --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json --prerelease" />
                    </li>
                    <li>
                        <CopyableCode Code="pat-generator --scopes code_write --organizations devdiv --expires-in 7" />
                    </li>
                </ol>

                <p>
                    Alternatively, you can go to <a href="https://dev.azure.com/devdiv/_usersSettings/tokens" target="_blank">Azure DevOps &gt; PATs</a>,
                    and create a token with <code>Code (Read & write)</code> permission.
                </p>
            </details>
        }
        else
        {
            <button type="submit" class="btn btn-outline-primary me-2" @onclick="LogOutAsync">Log Out</button>

            <select class="form-select d-inline-block w-auto me-1" @bind="statusFilter">
                <option value="@StatusFilter.All">All</option>
                <option value="@StatusFilter.Active">Only active</option>
            </select>

            <button class="btn btn-primary me-2" @onclick="StartAsync">Load</button>

            <button class="btn btn-outline-danger me-2" @onclick="@(() => editMode = !editMode)"
                    title="@(!editMode ? "Show Abandon buttons" : "Hide Abandon buttons")">
                @if (!editMode)
                {
                    @:Edit mode
                }
                else
                {
                    @:Readonly mode
                }
            </button>

            @if (loading)
            {
                @: Loading...
            }
        }
    </div>
}

@if (!started || errorHtml != null)
{
    if (errorHtml != null)
    {
        <p>⚠️ An error occurred. You may need to log in again. This is the HTML response returned:</p>
        <iframe srcdoc="@errorHtml" style="width: 100%; height: 70vh"></iframe>
    }
}
else if (insertions == null)
{
    <p>Loading...</p>
}
else
{
    <label>Repo:</label>
    <select class="form-select d-inline-block w-auto me-3" @bind="currentRepo">
        @foreach (var repo in insertions.Select(x => x.Repo).Distinct())
        {
            <option value="@repo">@repo</option>
        }
    </select>

    <label>Target:</label>
    <select class="form-select d-inline-block w-auto me-3" @bind="currentTargetBranch">
        @foreach (var branch in insertions.Select(x => x.TargetBranch).Distinct())
        {
            <option value="@branch">@branch</option>
        }
    </select>

    <button class="btn btn-outline-secondary btn-sm me-1" @onclick="() => LoadRps(numberOfRecentRpsToLoad)"
            title="Loads RPS/build status for @numberOfRecentRpsToLoad most recent PRs with not-yet-loaded RPS/build status across all branches and repos">
        Load @numberOfRecentRpsToLoad next recent RPS data
    </button>

    <button class="btn btn-outline-secondary btn-sm me-1" @onclick="() => LoadRps()"
            title="Loads RPS/build status for all loaded PRs with not-yet-loaded RPS/build status">
        Load all RPS data
    </button>

    <button class="btn btn-outline-secondary btn-sm me-1" @onclick="RefreshRps"
            title="Fetches RPS and build status again of PRs with previously-loaded RPS/build status">
        Refresh loaded RPS data
    </button>

    <div class="my-2">
        <span class="me-2">Display:</span>

        <div class="form-check form-check-inline" title="Display PR validations">
            <input class="form-check-input" type="checkbox" id="displayPrs" @bind="displayPrs">
            <label class="form-check-label" for="displayPrs">
                PRs
            </label>
        </div>

        <div class="form-check form-check-inline" title="Display draft PRs">
            <input class="form-check-input" type="checkbox" id="displayDrafts" @bind="displayDrafts">
            <label class="form-check-label" for="displayDrafts">
                Drafts
            </label>
        </div>

        <div class="form-check form-check-inline" title="Display inactive (abandoned, completed) PRs">
            <input class="form-check-input" type="checkbox" id="displayInactive" @bind="displayInactive">
            <label class="form-check-label" for="displayInactive">
                Inactive
            </label>
        </div>

        <span class="me-2">Sort by:</span>

        <select class="form-select form-select-sm d-inline-block w-auto" @bind="sortBy">
            <option value="@SortCriterion.BuildNumber">Build number</option>
            <option value="@SortCriterion.VsPrNumber">VS PR number</option>
        </select>
    </div>

    <table class="table table-hover w-auto align-middle">
        <thead>
            <tr>
                <th scope="col" title="PR number">PR #</th>
                <th scope="col" title="PR status">S</th>
                <th scope="col" title="Draft?">D</th>
                <th scope="col" title="Reviewers">R</th>
                <th scope="col" title="Title prefix">Prefix</th>
                <th scope="col" title="Source branch">Source</th>
                <th scope="col" title="Build number">Build #</th>
                @if (editMode)
                {
                    <th scope="col">Edit</th>
                }
                <th scope="col">Build</th>
                <th scope="col">DDRIT</th>
                <th scope="col" title="Speedometer-Scoped">Scoped</th>
                <th scope="col" title="Speedometer">Speed</th>
                <th scope="col"></th> @* Refresh RPS *@
            </tr>
        </thead>
        <tbody>
            @foreach (var insertion in insertions.OrderByDescending(GetInsertionSortKey))
            {
                if (insertion.Repo != currentRepo || insertion.TargetBranch != currentTargetBranch ||
                (!displayPrs && insertion.ParsedTitle?.IsPr == true) ||
                (!displayDrafts && insertion.IsDraft) ||
                (!displayInactive && insertion.Status != PullRequestStatus.Active))
                {
                    continue;
                }

                <tr>
                    <th scope="row" title="PR number">@insertion.PullRequestId</th>
                    <td title="@insertion.Status">@StatusToEmoji(insertion.Status)</td>
                    <td title="Draft? @insertion.IsDraft">@IsDraftToEmoji(insertion.IsDraft)</td>

                    <td>
                        @foreach (var review in insertion.Reviews)
                        {
                            <img src="@review.ImageUrl" title="@review.DisplayName: @review.Vote"
                                 style="width: 1em; height: 1em; border: 0.1em solid @VoteToColor(review.Vote)" />
                        }
                    </td>

                    <td title="Prefix">
                        @if (!string.IsNullOrEmpty(insertion.Prefix))
                        {
                            <span>[@insertion.Prefix]</span>
                        }
                    </td>

                    <td title="Source branch (the branch of the GitHub repo that the insertion is created from)">@insertion.SourceBranch</td>

                    <td><a href="@insertion.Url" title="@insertion.BuildNumberTooltip" target="_blank">@insertion.BuildNumber</a></td>

                    @if (editMode)
                    {
                        <td>
                            <button class="btn btn-outline-danger btn-sm" @onclick="insertion.AbandonAsync" disabled="@(insertion.Status != PullRequestStatus.Active)">
                                @if (insertion.Abandoning)
                                {
                                    @:Abandoning...
                                }
                                else
                                {
                                    @:Abandon
                                }
                            </button>
                        </td>
                    }

                    @if (insertion.RpsSummary is null)
                    {
                        <td colspan="4">RPS not loaded</td>
                    }
                    else if (!insertion.RpsSummary.Loaded)
                    {
                        <td colspan="4">Loading RPS...</td>
                    }
                    else
                    {
                        var build = insertion.RpsSummary.BuildStatus.Display();
                        var desktopValidation = insertion.RpsSummary.DesktopValidationStatus.Display();
                        <td>
                            <span title="Build: @build.Long">@build.Short</span>
                            <span title="DesktopValidation: @desktopValidation.Long">@desktopValidation.Short</span>
                        </td>
                        var ddrit = insertion.RpsSummary.Ddrit.Display();
                        <td title="DDRIT: @ddrit.Long">@ddrit.Short</td>
                        var speedometerScoped = insertion.RpsSummary.SpeedometerScoped.Display();
                        <td title="Speedometer-Scoped: @speedometerScoped.Long">@speedometerScoped.Short</td>
                        var speedometer = insertion.RpsSummary.Speedometer.Display();
                        <td title="Speedometer: @speedometer.Long">@speedometer.Short</td>
                    }

                    <td>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="insertion.RefreshRpsSummary"
                                title="Fetch RPS and build status again">
                            Refresh RPS
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-outline-secondary me-2" @onclick="LoadMoreAsync">Load more</button>
    @if (loading)
    {
        @: Loading...
    }

    <p></p>
}

<script>
    function getAccessTokenCookie() {
        const name = "access_token=";
        const decodedCookie = decodeURIComponent(document.cookie);
        const cookies = decodedCookie.split(';');
        for (const cookie of cookies) {
            if (cookie.trim().startsWith(name)) {
                return cookie.substring(name.length);
            }
        }
        return "";
    }

    function setAccessTokenCookie(value) {
        document.cookie = "access_token=" + value + ";secure;samesite=strict"
    }
</script>

@code {
    private static readonly int numberOfRecentRpsToLoad = 10;

    // https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-requests/get-pull-requests?view=azure-devops-rest-6.0&tabs=HTTP
    private static readonly string listUrl = "https://dev.azure.com/devdiv/devdiv/_apis/git/repositories/a290117c-5a8a-40f7-bc2c-f14dbe3acf6d/pullrequests?searchCriteria.creatorId=122d5278-3e55-4868-9d40-1e28c2515fc4&searchCriteria.reviewerId=6c25b447-1d90-4840-8fde-d8b22cb8733e&api-version=6.0";

    private string? accessTokenInput;
    private string? accessToken;
    private HttpClient client = new HttpClient();
    private bool browser;
    private bool started;
    private bool loading;
    private bool editMode;
    private bool displayPrs = false, displayDrafts = true, displayInactive = true;
    private StatusFilter statusFilter;
    private SortCriterion sortBy = SortCriterion.BuildNumber;
    private string currentRepo = "Roslyn";
    private string currentTargetBranch = "refs/heads/main";
    private VsInsertion[]? insertions;
    /// <summary>Map from VS Insertion PR ID to the corresponding <see cref="RpsSummary"/>.</summary>
    /// <remarks>Kept separately from the list of insertions so RPS data survive reloads of insertions.</remarks>
    private readonly Dictionary<string, RpsSummary> rpsSummaries = new();
    private string? errorHtml;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var encryptedAccessToken = await JSRuntime.InvokeAsync<string>("getAccessTokenCookie");

            try
            {
                accessToken = string.IsNullOrEmpty(encryptedAccessToken) ? null :
                    DataProtectionProvider.CreateProtector("access_token").Unprotect(encryptedAccessToken);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                accessToken = null;
            }

            browser = true;
            StateHasChanged();

            await StartAsync();
            StateHasChanged();
        }
    }

    private async Task LogInAsync()
    {
        if (string.IsNullOrEmpty(accessTokenInput))
        {
            return;
        }

        var encryptedAccessToken = DataProtectionProvider.CreateProtector("access_token").Protect(accessTokenInput);
        await JSRuntime.InvokeVoidAsync("setAccessTokenCookie", encryptedAccessToken);
        accessToken = accessTokenInput;
        accessTokenInput = null;
        errorHtml = null;
        started = false;

        await StartAsync();
    }

    private async Task LogOutAsync()
    {
        await JSRuntime.InvokeVoidAsync("setAccessTokenCookie", "");
        accessToken = null;
    }

    private async Task StartAsync()
    {
        if (string.IsNullOrEmpty(accessToken))
        {
            return;
        }

        started = true;
        insertions = null;
        errorHtml = null;
        StateHasChanged();

        client.DefaultRequestHeaders.Remove("Authorization");
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {accessToken}");

        await LoadMoreAsync();
    }

    private async Task LoadMoreAsync()
    {
        loading = true;
        StateHasChanged();
        try
        {
            var skip = insertions?.Length ?? 0;
            var url = listUrl + "&searchCriteria.status=" + statusFilter.ToString().ToLowerInvariant() + "&$top=100&$skip=" + skip;
            Console.WriteLine(url);
            var response = await client.GetAsync(url);
            Console.WriteLine("Loaded");

            string? responseText = null;
            JsonNode? node;
            try
            {
                responseText = await response.Content.ReadAsStringAsync();
                response.EnsureSuccessStatusCode();
                node = JsonNode.Parse(responseText);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                errorHtml = responseText ?? ex.ToString();
                return;
            }

            errorHtml = null;
            var moreInsertions = node!["value"]!.AsArray().Select(x => new VsInsertion(this, x!));

            if (insertions == null)
            {
                insertions = moreInsertions.ToArray();
            }
            else
            {
                insertions = insertions.Concat(moreInsertions).ToArray();
            }
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private static (int, int, int, string) GetInsertionSortKey(VsInsertion insertion)
        => insertion.SortKey;

    private void LoadRps(int? max = null)
    {
        if (insertions != null)
        {
            var count = 0;
            foreach (var insertion in insertions.OrderByDescending(GetInsertionSortKey))
            {
                if (insertion.RpsSummary is null)
                {
                    count++;
                    insertion.RefreshRpsSummary();
                }

                if (count >= max)
                {
                    break;
                }
            }
        }
    }

    private void RefreshRps()
    {
        if (insertions != null)
        {
            foreach (var insertion in insertions.OrderByDescending(GetInsertionSortKey))
            {
                if (insertion.RpsSummary != null)
                {
                    insertion.RefreshRpsSummary();
                }
            }
        }
    }

    class VsInsertion(Insertions page, JsonNode node)
    {
        private ParsedTitle? _parsedTitle;

        public bool Abandoning { get; private set; }

        public string PullRequestId => node["pullRequestId"]!.ToString();
        public int? PullRequestNumber => int.TryParse(PullRequestId, out var number) ? number : null;
        public string Url => $"https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/{PullRequestId}";
        public string Title => node["title"]!.ToString();
        public ParsedTitle? ParsedTitle => (_parsedTitle ??= page.TitleParser.Parse(Title));
        public PullRequestStatus Status { get; private set; } = Enum.Parse<PullRequestStatus>(node["status"]!.ToString(), ignoreCase: true);
        public bool IsDraft => (bool)node["isDraft"]!;
        public string? Prefix
        {
            get
            {
                return ParsedTitle?.Prefix switch
                {
                    "PR Validation" => "PR",
                    var p => p,
                };
            }
        }
        public string Repo
        {
            get
            {
                var repository = ParsedTitle?.Repository;
                if (string.IsNullOrEmpty(repository))
                {
                    return "<unknown>";
                }
                return repository;
            }
        }
        public string? SourceBranch => ParsedTitle?.SourceBranch;
        public DateTimeOffset CreationDate => node["creationDate"]!.GetValue<DateTimeOffset>();
        public string BuildNumber => ParsedTitle?.BuildNumber ?? Title;
        public (int, int)? BuildNumberParts
        {
            get
            {
                var parts = BuildNumber.Split('.', 3);
                if (parts.Length == 2 && int.TryParse(parts[0], out var part1) && int.TryParse(parts[1], out var part2))
                {
                    return (part1, part2);
                }

                return null;
            }
        }
        public string TargetBranch => node["targetRefName"]!.ToString();
        public Review[] Reviews { get; } = node["reviewers"]?.AsArray().Select(x => new Review(x!)).ToArray() ?? Array.Empty<Review>();
        public RpsSummary? RpsSummary
        {
            get => page.rpsSummaries.TryGetValue(PullRequestId, out var rpsSummary) ? rpsSummary : null;
            private set
            {
                if (value is null)
                {
                    page.rpsSummaries.Remove(PullRequestId);
                }
                else
                {
                    page.rpsSummaries[PullRequestId] = value;
                }
            }
        }

        public string BuildNumberTooltip
        {
            get
            {
                return $"""
                    {Title}
                    Created: {CreationDate:R}
                    """;
            }
        }

        public (int, int, int, string) SortKey
        {
            get
            {
                var prNumber = PullRequestNumber ?? -1;
                var (buildNumber1, buildNumber2) = BuildNumberParts ?? (-1, -1);

                // The string ID is included as fallback if everything fails to parse.
                return page.sortBy switch
                {
                    SortCriterion.BuildNumber => (buildNumber1, buildNumber2, prNumber, PullRequestId),
                    SortCriterion.VsPrNumber => (prNumber, buildNumber1, buildNumber2, PullRequestId),
                    _ => throw new ArgumentOutOfRangeException(nameof(sortBy)),
                };
            }
        }

        public async Task AbandonAsync()
        {
            Abandoning = true;
            try
            {
                // https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-requests/update?view=azure-devops-rest-7.0&tabs=HTTP
                var response = await page.client.PatchAsJsonAsync(
                    $"https://dev.azure.com/devdiv/devdiv/_apis/git/repositories/a290117c-5a8a-40f7-bc2c-f14dbe3acf6d/pullrequests/{PullRequestId}?api-version=7.0",
                    new { status = "abandoned" });
                Console.WriteLine(response);
                Console.WriteLine(await response.Content.ReadAsStringAsync());

                if (response.IsSuccessStatusCode)
                {
                    Status = PullRequestStatus.Abandoned;
                }
            }
            finally
            {
                Abandoning = false;
            }
        }

        public void RefreshRpsSummary()
        {
            RpsSummary = new RpsSummary();
            page.StateHasChanged();
            LoadRpsSummary(RpsSummary);
        }

        private async void LoadRpsSummary(RpsSummary rpsSummary)
        {
            try
            {
                // https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-request-threads/list?view=azure-devops-rest-6.0&tabs=HTTP
                var threadsJson = page.client.GetStringAsync($"https://dev.azure.com/devdiv/devdiv/_apis/git/repositories/a290117c-5a8a-40f7-bc2c-f14dbe3acf6d/pullrequests/{PullRequestId}/threads?api-version=6.0");

                // https://learn.microsoft.com/en-us/rest/api/azure/devops/policy/evaluations/list?view=azure-devops-rest-6.0&tabs=HTTP
                var checksJson = page.client.GetStringAsync($"https://dev.azure.com/devdiv/devdiv/_apis/policy/evaluations?artifactId=vstfs:///CodeReview/CodeReviewId/0bdbc590-a062-4c3f-b0f6-9383f67865ee/{PullRequestId}&api-version=6.0-preview.1");

                page.RpsParser.ParseRpsSummary(threadsJson: await threadsJson, checksJson: await checksJson, rpsSummary);
                rpsSummary.Loaded = true;
                page.StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                rpsSummary.Loaded = true;
                page.StateHasChanged();
            }
        }
    }

    class Review(JsonNode node)
    {
        public string DisplayName => node["displayName"]!.ToString();
        public string ImageUrl => node["imageUrl"]!.ToString();
        public Vote Vote => (Vote)(int)node["vote"]!;
    }

    enum SortCriterion
    {
        BuildNumber,
        VsPrNumber,
    }

    enum PullRequestStatus
    {
        Abandoned,
        Active,
        Completed
    }

    enum StatusFilter
    {
        All,
        Active
    }

    static string StatusToEmoji(PullRequestStatus status) => status switch
    {
        PullRequestStatus.Abandoned => "🔴", // red circle
        PullRequestStatus.Active => "🟡", // yellow circle
        PullRequestStatus.Completed => "🟢", // green circle
        _ => "?",
    };

    static string IsDraftToEmoji(bool isDraft) => isDraft switch
    {
        true => "🔘", // white circle
        false => "⚫", // black circle
    };

    enum Vote
    {
        Approved = 10,
        ApprovedWithSuggestions = 5,
        NoVote = 0,
        WaitingForAuthor = -5,
        Rejected = -10,
    }

    static string VoteToColor(Vote vote) => vote switch
    {
        Vote.Approved => "green",
        Vote.Rejected => "red",
        Vote.NoVote => "lightgray",
        _ => "yellow",
    };
}
